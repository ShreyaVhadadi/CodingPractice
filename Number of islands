class Solution {
    public int numIslands(char[][] grid) {
        //Use dfs to explore path
        int ans =0;
        for(int i=0;i<grid.length;i++){//2d array to traverse through grid
            for(int j=0;j<grid[i].length;j++){
            if(grid[i][j]=='1')
            {
                dfs(i,j,grid);
                ans++;
            }        
            }
        }
        return ans; 
    }
    public void dfs(int i,int j,char[][]grid){
        if(i<0 || i>=grid.length|| j<0|| j>=grid[0].length|| grid[i][j]=='0'){
            return;
        }
        grid[i][j]='0';
        dfs(i+1,j,grid);
        dfs(i-1,j,grid);
        dfs(i,j+1,grid);
        dfs(i,j-1,grid);  
        return;
    }
    
}
//Implementing DFS exploring each grid in depth
//Time complexity:- O(m*n)
//Space Complexity:-O(m*n)//worst case as if the grid contains all 1 then the stack size goes to  m*n
