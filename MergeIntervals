class Solution {
    public int[][] merge(int[][] intervals) {
     Arrays.sort(intervals,(a,b)->a[0]-b[0]);
     ArrayList<int []> list = new ArrayList<>();
     int[] a = intervals[0];
     //list.add(a);
     for (int[] x: intervals){
        int start1=a[0];
        int end1=a[1];
        int start2=x[0];
        int end2=x[1];
        if(end1>=start2){
            a[1]=Math.max(end1,end2);
        }
        else{
            list.add(a);
            a=x;
        }
     }
     list.add(a);

     return list.toArray(new int[list.size()][]);

    }
}

//Time Complexity O(nlogn) Space O(n)
//For Time Complexity O(nlogn) Space O(1) would require ArrayList as input

